: get_x i pop ;
: get_y i swap pop ;

: my_position [] [[me ? position] query first second] ;
: my_direction [] [[me ? direction] query first second] ;
: xy_in_front [] [my_position my_direction v_add] ;
: whats_there [Vector] [? swap [position] cons cons query] ;
: is_empty [List] [length 0 ==] ;

# words
"goto" [Vector:v] [
  me xy facing vector_add swap path
  [me xy vector_sub face step] each
] define

# predicates
# executing a predicate registers it as a fact
[
  ["position" [Ref:agent Vector:v]] 
  ["job" [Ref:agent String:j]]
  ["gold" [Ref:agent Number:n]]
  ["same_col" [Ref:agent_a Ref:agent_b]]

  ["names"     [String Ref]] # has name
  ["like"      [Ref Ref]]    # similar
  ["in"        [Ref Ref]]    # containment
  ["after"     [Ref Ref]]    # follows
] [i predicate] each

# facts
"alice" &3 names
"bob" &4 names
"eve" &5 names
alice [3 4] position
alice fairy
alice 5 gold
bob [3 9] position
bob wizard
bob 5 gold

# queries
[bob % gold] ? # [[bob 5 gold]]
[% 5 gold] ?   # [[alice 5 gold] [bob 5 gold]]

[&1 &1 contains] ? # [[&1 &1 contains]] (identity. a thing is self-contained, exists as itself)

"room" &af names
[alice bob eve] [room in] each

# who is in the same room as alice?
alice [% in] cons ? first second # room <- the room
% swap [in] consd ? [first] each # [alice bob eve] <- everyone in the room
[alice !=] filter                # [bob eve] <- except alice

# [ ] if a thing has a name, it's ref should be transformed into that name before output
# [ ] implement consd
# [ ] alias 'map' with 'each'

# deduction rules
[[
  same_col # predicate
  [
    [!=]
    [[position] cons ? i second get_y swap 
     [position] cons ? i second get_y ==]
  ] # conditions, [i] map [true ==] map
]] [i rule] map

# strategies
# [[
#   [
#     [xy_in_front within_bounds]
#     [xy_in_front whats_there is_empty]
#   ] # precondition
#   [step] # action
#   [me xy_in_front [position] cons cons] # add facts
#   [[me % position]] # remove facts
# ]] [strategy] map

# examples
&1 &2 same_col
&1 &3 same_col
[me position] ?      # [[&1 [0 0] position]]
[&3 % same_col] ?    # [[&1 &3 same_col]]
[% % same_col] ?     # [[&1 &2 same_col] [&1 &3 same_col]]

[% "wizard" job] ?   # [[bob "wizard" job]]
[% 5 gold] ?         # [[alice 5 gold] [bob 5 gold]]
[% % position] ?     # [[alice [3 4] position] [bob [3 9] position]]
[% [3 %] position] ? # [[alice [3 4] position] [bob [3 9] position]]
[% bob same_col] ?   # [[alice bob same_col]]

# goals
# me [0 0] position
[ me [15 9] position ] goal

[
  [me % position] ? first second
  [[me % position] goal] ? first second
  !=
]

[ [[me % position] goal] ? first second goto ]
#[ east face step 15 times south face step 9 times ]
